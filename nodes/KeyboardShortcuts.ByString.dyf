<Workspace Version="1.3.1.1736" X="446" Y="283" zoom="1" ScaleFactor="1" Name="KeyboardShortcuts.ByString" Description="Creates a queriable object from the content of a Revit KeyboardShortcuts.xml file" ID="680af772-884a-4fc5-adf5-2f7d3e5066a6" Category="Journalysis.KeyboardShortcuts.Create">
  <NamespaceResolutionMap>
    <ClassMap partialName="File" resolvedName="DSCore.IO.File" assemblyName="DSCoreNodes.dll" />
    <ClassMap partialName="System.IO.FileInfo" resolvedName="System.IO.FileInfo" assemblyName="" />
    <ClassMap partialName="List.Empty" resolvedName="DSCore.List" assemblyName="DSCoreNodes.dll" />
  </NamespaceResolutionMap>
  <Elements>
    <PythonNodeModels.PythonNode guid="28fdfe01-9f09-4af8-b8a6-6f095b583e6a" type="PythonNodeModels.PythonNode" nickname="Python Script" x="250" y="0" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>import clr
import sys
pyt_path = r'C:\Program Files (x86)\IronPython 2.7\Lib'
sys.path.append(pyt_path)
import xml.etree.ElementTree as ET

class KeyboardShortcuts:
	def __init__(self, commands, commandcount, commandcountwithshortcuts):
		self.Commands = commands
		self.CommandCount = commandcount
		self.CommandCountWithShortcuts = commandcountwithshortcuts
	def __repr__(self):
		return 'KeyboardShortcuts'
	def GetCommandsWithShortcuts(self):
		return [x for x in self.Commands if x.HasShortcuts]

class KeyboardShortcutCommand:
	def __init__(self, name, id, shortcuts, paths):
		self.Name = name
		self.ID = id
		self.Shortcuts = shortcuts
		self.Paths = paths
		self.HasShortcuts = len(shortcuts) &gt; 0
		self.HasPaths = len(paths) &gt; 0
	def __repr__(self):
		return 'KeyboardShortcutCommand'

Commands = []
CommandCount = 0
CommandCountWithShortcuts = 0
root = ET.fromstring(IN[0])
for child in root:
	if child.tag == "ShortcutItem":	
		CommandCount += 1
		shortcuts = child.get("Shortcuts") 
		if shortcuts == None: CommandShortcuts = []
		else: 
			CommandShortcuts = shortcuts.split("#")
			CommandCountWithShortcuts += 1
		paths = child.get("Paths") 
		if paths == None: CommandPaths = []
		else: CommandPaths = paths.split("; ")
		Commands.append(KeyboardShortcutCommand(child.get("CommandName"), child.get("CommandId"), CommandShortcuts, CommandPaths))

OUT = KeyboardShortcuts(Commands, CommandCount, CommandCountWithShortcuts)</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="be989bba-38f4-4988-9d9b-4c12c4465d70" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="0" y="0" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="str : string" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="017727e6-9e5a-47f9-a6dc-1e4ede869cd4" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="449" y="0" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="keyboardShortcuts" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="28fdfe01-9f09-4af8-b8a6-6f095b583e6a" start_index="0" end="017727e6-9e5a-47f9-a6dc-1e4ede869cd4" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="be989bba-38f4-4988-9d9b-4c12c4465d70" start_index="0" end="28fdfe01-9f09-4af8-b8a6-6f095b583e6a" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
</Workspace>