<Workspace Version="1.3.1.1736" X="11" Y="252" zoom="1" ScaleFactor="1" Name="WorksharingLog.ByString" Description="Creates a queriable object from a Revit worksharing log" ID="3078f9e3-cb0d-4236-9ecb-9d247f6ff9c7" Category="Journalysis.WorksharingLog.Create">
  <NamespaceResolutionMap>
    <ClassMap partialName="File" resolvedName="DSCore.IO.File" assemblyName="DSCoreNodes.dll" />
    <ClassMap partialName="System.IO.FileInfo" resolvedName="System.IO.FileInfo" assemblyName="" />
    <ClassMap partialName="List.Empty" resolvedName="DSCore.List" assemblyName="DSCoreNodes.dll" />
  </NamespaceResolutionMap>
  <Elements>
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="487fa2cf-7ed5-4dd2-955b-4c7ca7fde1ae" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="String.TrimLeadingWhitespace" x="624.869870943338" y="14.7402533568851" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false" assembly="DSCoreNodes.dll" function="DSCore.String.TrimLeadingWhitespace@string">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.ZeroTouch.DSFunction>
    <PythonNodeModels.PythonNode guid="29a8dd8e-4567-44cb-88fb-8763b5d28176" type="PythonNodeModels.PythonNode" nickname="Python Script" x="926.869870943338" y="14.7402533568851" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>import clr
import time
processing_started = time.time()

class WorksharingLog:
	def __init__(self, version, sessions):
		self.Version = version
		self.Sessions = sessions
		self.SessionCount = len(sessions)
		self.ProcessingTime = None
	def __repr__(self):
		return "WorksharingLog"
	def AllSessionsUseSameBuild(self):
		return len(set([x.RevitBuild for x in self.Sessions])) == 1
	def GetSessionByID(self, ID):
		sessionlookup = [x for x in sessions if x.ID == ID]
		if len(sessionlookup) &gt; 0: return sessionlookup[0]
		else: return None

class WorksharingSession:
	def __init__(self, id):
		self.ID = id
		self.Start = None
		self.End = None
		self.Date = None
		self.Duration = None
		self.User = None
		self.RevitVersion = None
		self.RevitBuild = None
		self.Journal = None
		self.HostIP = None
		self.HostName = None
		self.ServerIP = None
		self.ServerName = None
		self.Central = None
		self.Events = []
	def __repr__(self):
		return "WorksharingSession"
	def CreatesNewCentral(self):
		return len([x for x in self.Events if x.Text == "&gt;Open"]) == 0
	def GetLoadDuration(self):
		if self.CreatesNewCentral(): return None
		else:
			openStart = [x.DateTime for x in self.Events if x.Text == "&gt;Open"][0]
			openEnd = None
			if self.UsesCentralModel(): 
				breakLoop = False
				for event in self.Events:
					if event.Text == "&gt;Open":
						breakLoop = True
					if event.Text.startswith("&gt;Open") or event.Text.startswith(".Open") or event.Text.startswith("&lt;Open"):
						if event.Text.startswith("&lt;Open"): openEnd = event.DateTime
					# Terminate the loop as soon as we start seeing stuff that's not from the Open block
					# This should give us the timestamp of the last opened link 
					# (if any - otherwise the timestamp of the concluded opening sequence)
					# Of course we only want to start breaking the loop once the Opne block has begun
					elif breakLoop == True: break
					else: pass					
			# In local copies, there's a WSConfig block directly following the Open block which we should include here
			# Linked models are loaded in between those blocks
			else: 
				lastOpenLine = [x.DateTime for x in self.Events if x.Text == "&lt;WSConfig"]
				if len(lastOpenLine) &gt; 0: openEnd = lastOpenLine[0]
			if openEnd == None: return None
			else: return openEnd - openStart
	def GetSyncEvents(self):
		events = []
		for event in self.Events:
			if event.Text == "&gt;STC": events.append(SyncEvent(event.DateTime))
			elif event.Text == "&lt;STC" and len(events) &gt; 0:
				events[-1].End = event.DateTime
				events[-1].Duration = event.DateTime - events[-1].Start
		return events
	def UsesCentralModel(self):
		if self.CreatesNewCentral(): return True
		else: return len([x for x in self.Events if x.Text.startswith("&gt;Open:Central")]) &gt; 0
	def WasTerminatedProperly(self):
		return self.End != None

class WorksharingEvent:
	def __init__(self, timestamp, text):
		self.DateTime = timestamp
		self.Text = text
	def __repr__(self):
		return "WorksharingEvent"

class SyncEvent:
	def __init__(self, start):
		self.Start = start
		self.End = None
		self.Duration = None
	def __repr__(self):
		return "SyncEvent"

slog = IN[0]
sessions = []
version = None

for line in slog:
	if line.startswith("$"):
		contents = line.split()
		session_lookup = [x for x in sessions if x.ID == contents[0]]
		if len(session_lookup) == 0:
			sessions.append(WorksharingSession(contents[0]))
			current_session = sessions[-1]
		else:
			current_session = session_lookup[0]
		timestamp = time.strptime(contents[1] + " " + contents[2])
		text = ' '.join(contents[3:])
		event = WorksharingEvent(timestamp, text)
		current_session.Events.append(event)
		if text.startswith("&gt;Session"): 
			sessions[-1].Start = timestamp
			sessions[-1].Date = timestamp.Date
		elif text.startswith("&lt;Session"): 
			sessions[-1].End = timestamp
			sessions[-1].Duration = timestamp - sessions[-1].Start
	elif line.startswith("user"):
		sessions[-1].User = line.split('user="')[-1][:-1]
	elif line.startswith("build"):
		versioninfo = line.split('build="')[-1].split()
		sessions[-1].RevitVersion = int(versioninfo[0])
		sessions[-1].RevitBuild = versioninfo[-1][:-1]
	elif line.startswith("journal"):
		sessions[-1].Journal = line.split('journal="')[-1][:-1]
	elif line.startswith("host"):
		hostinfo = line.split('host=')[-1].split()
		sessions[-1].HostIP = hostinfo[0]
		sessions[-1].HostName = hostinfo[-1][1:-1]
	elif line.startswith("server"):
		serverinfo = line.split('server=')[-1].split()
		sessions[-1].ServerIP = serverinfo[0]
		sessions[-1].ServerName = serverinfo[-1][1:-1]
	elif line.startswith("central"):
		sessions[-1].Central = line.split('central="')[-1][:-1]
	elif line.startswith("Worksharing"):
		version = line.split("Version ")[-1].split(",")[0]	

WSLog = WorksharingLog(version, sessions)
WSLog.ProcessingTime = time.time() - processing_started
OUT = WSLog</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction guid="d6dd8bb7-432e-40d3-b4c1-2a3c8c92ce70" type="Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction" nickname="String.Split" x="294.869870943338" y="14.7402533568851" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false" assembly="DSCoreNodes.dll" function="DSCore.String.Split@string,string[]" inputcount="2">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
    </Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction>
    <CoreNodeModels.Input.StringInput guid="7b1c0684-b724-47dd-aa27-3825990c313a" type="CoreNodeModels.Input.StringInput" nickname="String" x="65.8698709433385" y="69.7402533568851" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <System.String>
</System.String>
      <System.String value="&#xD;&#xA;" />
    </CoreNodeModels.Input.StringInput>
    <Dynamo.Graph.Nodes.CustomNodes.Symbol guid="7825a88c-ae97-438b-9ffd-f958713df2fe" type="Dynamo.Graph.Nodes.CustomNodes.Symbol" nickname="Input" x="65.8698709433385" y="-14.2597466431149" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <Symbol value="str : string" />
    </Dynamo.Graph.Nodes.CustomNodes.Symbol>
    <Dynamo.Graph.Nodes.CustomNodes.Output guid="89d2bfd7-2e94-48e5-8eca-7b55be366299" type="Dynamo.Graph.Nodes.CustomNodes.Output" nickname="Output" x="1150.86987094334" y="14.7402533568851" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <Symbol value="worksharingLog" />
    </Dynamo.Graph.Nodes.CustomNodes.Output>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="487fa2cf-7ed5-4dd2-955b-4c7ca7fde1ae" start_index="0" end="29a8dd8e-4567-44cb-88fb-8763b5d28176" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="29a8dd8e-4567-44cb-88fb-8763b5d28176" start_index="0" end="89d2bfd7-2e94-48e5-8eca-7b55be366299" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="d6dd8bb7-432e-40d3-b4c1-2a3c8c92ce70" start_index="0" end="487fa2cf-7ed5-4dd2-955b-4c7ca7fde1ae" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="7b1c0684-b724-47dd-aa27-3825990c313a" start_index="0" end="d6dd8bb7-432e-40d3-b4c1-2a3c8c92ce70" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="7825a88c-ae97-438b-9ffd-f958713df2fe" start_index="0" end="d6dd8bb7-432e-40d3-b4c1-2a3c8c92ce70" end_index="0" portType="0" />
  </Connectors>
  <Notes />
  <Annotations />
  <Presets />
  <Cameras>
    <Camera Name="Hintergrundvorschau" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>