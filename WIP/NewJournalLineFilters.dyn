<Workspace Version="1.3.1.1736" X="894.36610026696" Y="2265.08888182844" zoom="0.808757526403157" ScaleFactor="1" Name="Home" Description="" RunType="Manual" RunPeriod="1000" HasRunWithoutCrash="True">
  <NamespaceResolutionMap>
    <ClassMap partialName="File" resolvedName="DSCore.IO.File" assemblyName="DSCoreNodes.dll" />
    <ClassMap partialName="System.IO.FileInfo" resolvedName="System.IO.FileInfo" assemblyName="" />
    <ClassMap partialName="List.Empty" resolvedName="DSCore.List" assemblyName="DSCoreNodes.dll" />
  </NamespaceResolutionMap>
  <Elements>
    <CoreNodeModels.Input.Filename guid="19fd1f7b-c2dc-4f95-9b5f-26ec82af2d4a" type="CoreNodeModels.Input.Filename" nickname="File Path" x="-1682.88599171625" y="-2079.65167095318" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <System.String>..\..\..\..\Desktop\avinor\journal.0534.txt</System.String>
      <HintPath>C:\Users\andreas\Desktop\avinor\journal.0534.txt</HintPath>
    </CoreNodeModels.Input.Filename>
    <CoreNodeModels.Input.FileObject guid="fbf3e296-e2e2-4ba0-9585-dfc942d02331" type="CoreNodeModels.Input.FileObject" nickname="File.FromPath" x="-1330.88599171625" y="-2079.65167095318" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
    </CoreNodeModels.Input.FileObject>
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="7a0b9ac6-ed23-45c0-ac0e-3b6e97941625" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="File.ReadText" x="-1120.88599171625" y="-2079.65167095318" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false" assembly="DSCoreNodes.dll" function="DSCore.IO.File.ReadText@var">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.ZeroTouch.DSFunction>
    <Dynamo.Graph.Nodes.CustomNodes.Function guid="41c6f982-6c1c-4b72-a203-3f4e2d5b2b05" type="Dynamo.Graph.Nodes.CustomNodes.Function" nickname="Journal.ByString" x="-868.536362858845" y="-2079.65167095318" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <ID value="a293c700-5298-4ab5-9dce-d23c323a405a" />
      <Name value="Journal.ByString" />
      <Description value="" />
      <Inputs>
        <Input value="str" />
      </Inputs>
      <Outputs>
        <Output value="journal" />
      </Outputs>
    </Dynamo.Graph.Nodes.CustomNodes.Function>
    <PythonNodeModels.PythonNode guid="26e144d5-ffd0-4165-8dd7-5975975e468c" type="PythonNodeModels.PythonNode" nickname="Python Script" x="-350.629090373491" y="-1953.38499411565" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>import clr

OUT = []
if IN[0].__repr__() == 'Journal':
	# Option 1: Sync with settings from ribbon
	allPushButtonEvents = IN[0].GetLinesByTypeAndProperty('JournalUIEvent', 'UIEventType', 'PushButton')
	allSyncs1StartCandidates = [x for x in allPushButtonEvents if x.Data[2] == 'Dialog_Revit_PartitionsSaveToMaster']
	allSyncs1Start = [x for x in allSyncs1StartCandidates if x.Data[4] == 'IDOK']
	allSyncs1StartTimeStamps = [x.Next() for x in allSyncs1Start]
	
	# Option 2: Quick sync from ribbon
	# Option 3: Sync with settings via keyboard shortcut
	# Option 4: Quick sync via keyboard shortcut
	# Option 5: Sync on exit
OUT = allSyncs1StartTimeStamps</Script>
    </PythonNodeModels.PythonNode>
    <Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction guid="bbf4c1a2-2f77-44e0-b339-2db1d7e9c6fc" type="Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction" nickname="String.Split" x="-1020.38199614502" y="-2299.40250634433" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false" assembly="DSCoreNodes.dll" function="DSCore.String.Split@string,string[]" inputcount="2">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
    </Dynamo.Graph.Nodes.ZeroTouch.DSVarArgFunction>
    <Dynamo.Graph.Nodes.ZeroTouch.DSFunction guid="b6c87b5e-da3f-479c-80e2-27f2bc7e86b7" type="Dynamo.Graph.Nodes.ZeroTouch.DSFunction" nickname="String.TrimLeadingWhitespace" x="-690.381996145015" y="-2299.40250634433" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false" assembly="DSCoreNodes.dll" function="DSCore.String.TrimLeadingWhitespace@string">
      <PortInfo index="0" default="False" />
    </Dynamo.Graph.Nodes.ZeroTouch.DSFunction>
    <PythonNodeModels.PythonNode guid="305fb3aa-fc30-488f-b2c3-c46792df4577" type="PythonNodeModels.PythonNode" nickname="Python Script" x="-388.381996145015" y="-2299.40250634433" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="false" inputcount="1">
      <PortInfo index="0" default="False" />
      <Script>import clr
import sys
sys.path.append("C:\Program Files (x86)\IronPython 2.7\Lib")
import os
import time
processing_started = time.time()

class Journal:
	def __init__(self, lines, version, username, blockcount, path, build, branch, machinename, osversion):
		self.Lines = lines
		self.LineCount = len(lines)
		self.Version = version
		self.User = username	
		self.BlockCount = blockcount
		self.Path = path
		self.ProcessingTime = None
		self.SessionTime = None
		self.StartupTime = None
		self.SessionTerminatedProperly = False
		self.IsInPlaybackMode = False
		self.PlaybackInterrupted = False
		self.Build = build
		self.Branch = branch
		self.ContainsAPIErrors = False
		self.ContainsExceptions = False
		self.Machine = machinename
		self.OSVersion = osversion
		self.MaxRAMPeak = None
		self.MinRAMAvailable = None
		self.MaxVMPeak = None
		self.MinVMAvailable = None
	def __repr__(self):
		return 'Journal'
	def GetLinesByBlock(self, block):
		return [x for x in self.Lines if x.Block == block]
	def GetLinesByBlocks(self, blocks):
		return [x for x in self.Lines if x.Block in blocks]
	def GetLinesByType(self, type):
		return [x for x in self.Lines if x.Type == type]
	def GetLinesByTypeAndProperty(self, type, prop, val):
		return [x for x in self.Lines if x.Type == type and getattr(x, prop) == val]
	def GetLinesByTypes(self, types):
		return [x for x in self.Lines if x.Type in types]

class JournalLine:
	def __init__(self, number, raw, block, type):
		self.Number = number
		self.RawText = raw
		self.Block = block
		self.Type = type
		self.Journal = None
	def __repr__(self):
		return 'JournalLine'
	def AllNext(self):
		if self.Journal.Lines.index(self) + 1 &lt; self.Journal.LineCount:
			return self.Journal.Lines[self.Journal.Lines.index(self) + 1:]
		else: return []
	def AllNextOfType(self, type):
		return [x for x in self.AllNext() if x.Type == type]
	def AllNextOfTypeAndProperty(self, type, prop, val):
		return [x for x in self.AllNext() if x.Type == type and getattr(x, prop) == val]
	def AllPrevious(self):
		if self.Journal.Lines.index(self) - 1 &gt; -1:
			return self.Journal.Lines[:self.Journal.Lines.index(self)]
		else: return []
	def AllPreviousOfType(self, type):
		return [x for x in self.AllPrevious() if x.Type == type]
	def AllPreviousOfTypeAndProperty(self, type, prop, val):
		return [x for x in self.AllPrevious() if x.Type == type and getattr(x, prop) == val]
	def Next(self):
		if self.Journal.Lines.index(self) + 1 &lt; self.Journal.LineCount:
			return self.Journal.Lines[self.Journal.Lines.index(self) + 1]
		else: return None
	def NextOfType(self, type):
		allnext = self.AllNextOfType(type)
		if len(allnext) &gt; 0: return allnext[0]
		else: return None
	def NextOfTypeAndProperty(self, type, prop, val):
		allnext = self.AllNextOfTypeAndProperty(type, prop, val)
		if len(allnext) &gt; 0: return allnext[0]
		else: return None
	def Previous(self):
		if self.Journal.Lines.index(self) - 1 &gt; -1:
			return self.Journal.Lines[self.Journal.Lines.index(self) - 1]
		else: return None
	def PreviousOfType(self, type):
		allprev = self.AllPreviousOfType(type)
		if len(allprev) &gt; 0: return allprev[-1]
		else: return None
	def PreviousOfTypeAndProperty(self, type, prop, val):
		allprev = self.AllPreviousOfTypeAndProperty(type, prop, val)
		if len(allprev) &gt; 0: return allprev[-1]
		else: return None

class JournalAddinEvent(JournalLine):
	def __init__(self, number, raw, block, type):
		JournalLine.__init__(self, number, raw, block, type)
		self.MessageText = None
	def __repr__(self):
		return 'JournalAddinEvent'

class JournalAPIMessage(JournalLine):
	def __init__(self, number, raw, block, type, msg_type):
		JournalLine.__init__(self, number, raw, block, type)
		self.MessageType = msg_type
		self.MessageText = None
	def __repr__(self):
		return 'JournalAPIMessage'

class JournalCommand(JournalLine):
	def __init__(self, number, raw, block, type):
		JournalLine.__init__(self, number, raw, block, type)
		self.CommandType = None
		self.CommandDescription = None
		self.CommandID = None
	def __repr__(self):
		return 'JournalCommand'

class JournalComment(JournalLine):
	def __repr__(self):
		return 'JournalComment'

class JournalData(JournalLine):
	def __init__(self, number, raw, block, type):
		JournalLine.__init__(self, number, raw, block, type)
		self.Key = None
		self.Values = []
	def __repr__(self):
		return 'JournalData'

class JournalDirective(JournalLine):
	def __init__(self, number, raw, block, type):
		JournalLine.__init__(self, number, raw, block, type)
		self.Key = None
		self.Values = []
	def __repr__(self):
		return 'JournalDirective'

class JournalGUIResourceUsage(JournalLine):
	def __init__(self, number, raw, block, type):
		JournalLine.__init__(self, number, raw, block, type)
		self.Available = None
		self.Used = None
		self.User = None
	def __repr__(self):
		return 'JournalGUIResourceUsage'

class JournalKeyboardEvent(JournalLine):
	def __init__(self, number, raw, block, type):
		JournalLine.__init__(self, number, raw, block, type)
		self.Key = None
	def __repr__(self):
		return 'JournalKeyboardEvent'
		
class JournalMemoryMetrics(JournalLine):
	def __init__(self, number, raw, block, type):
		JournalLine.__init__(self, number, raw, block, type)
		self.VMAvailable = None
		self.VMUsed = None
		self.VMPeak = None
		self.RAMAvailable = None
		self.RAMUsed = None
		self.RAMPeak = None
	def __repr__(self):
		return 'JournalMemoryMetrics'

class JournalMiscCommand(JournalLine):
	def __repr__(self):
		return 'JournalMiscCommand'

class JournalMouseEvent(JournalLine):
	def __init__(self, number, raw, block, type):
		JournalLine.__init__(self, number, raw, block, type)
		self.MouseEventType = None
		self.Data = []
	def __repr__(self):
		return 'JournalMouseEvent'
		
class JournalTimeStamp(JournalLine):
	def __init__(self, number, raw, block, type):
		JournalLine.__init__(self, number, raw, block, type)
		self.TimeStampType = None
		self.DateTime = None
		self.Description = None
	def __repr__(self):
		return 'JournalTimeStamp'

class JournalUIEvent(JournalLine):
	def __init__(self, number, raw, block, type):
		JournalLine.__init__(self, number, raw, block, type)
		self.UIEventType = None
		self.Data = []
	def __repr__(self):
		return 'JournalUIEvent'

lines = IN[0]
lineObjs = []
jVersion = None
jUsername = None
jMachineName = None
jOSVersion = None
jPath = None
i = 1
b = 0
# Round 1: Create line objects
for line in lines:
	# ignore empty lines
	if len(line) &lt; 2:
		pass
	elif line.startswith("'C ") or line.startswith("'H ") or line.startswith("'E "):
		b += 1
		lineObjs.append(JournalTimeStamp(i,line,b,'JournalTimeStamp'))
	elif ":&lt; API_SUCCESS { " in line:
		lineObjs.append(JournalAPIMessage(i,line,b,'JournalAPIMessage','Success'))
	elif ":&lt; API_ERROR { " in line:
		lineObjs.append(JournalAPIMessage(i,line,b,'JournalAPIMessage','Error'))
	elif ":: Delta VM: " in line or line.startswith("' 0:&lt; Initial VM: "):
		lineObjs.append(JournalMemoryMetrics(i,line,b,'JournalMemoryMetrics'))
	elif ":&lt; GUI Resource Usage GDI: " in line:
		lineObjs.append(JournalGUIResourceUsage(i,line,b,'JournalGUIResourceUsage'))
	elif line.startswith("Jrn.Data "):
		lineObjs.append(JournalData(i,line,b,'JournalData'))
	elif line.startswith("Jrn.Directive "):
		lineObjs.append(JournalDirective(i,line,b,'JournalDirective'))
	elif line.startswith("Jrn.Command "):
		lineObjs.append(JournalCommand(i,line,b,'JournalCommand'))
	elif line.startswith("Jrn.Key "):
		lineObjs.append(JournalKeyboardEvent(i,line,b,'JournalKeyboardEvent'))
	elif line.startswith("Jrn.AddInEvent "):
		lineObjs.append(JournalAddinEvent(i,line,b,'JournalAddinEvent'))
	elif line.startswith('Jrn.Wheel') or line.startswith('Jrn.MouseMove') or line.startswith('Jrn.LButtonUp') or line.startswith('Jrn.LButtonDown') or line.startswith('Jrn.LButtonDblClk') or line.startswith('Jrn.MButtonUp') or line.startswith('Jrn.MButtonDown') or line.startswith('Jrn.MButtonDblClk') or line.startswith('Jrn.RButtonUp') or line.startswith('Jrn.RButtonDown') or line.startswith('Jrn.RButtonDblClk'):
		lineObjs.append(JournalMouseEvent(i,line,b,'JournalMouseEvent'))
	elif line.startswith('Jrn.Activate') or line.startswith('Jrn.AppButtonEvent') or line.startswith('Jrn.Browser') or line.startswith('Jrn.Close') or line.startswith('Jrn.ComboBox') or line.startswith('Jrn.Edit') or line.startswith('Jrn.Grid') or line.startswith('Jrn.ListBox') or line.startswith('Jrn.PropertiesPalette') or line.startswith('Jrn.PushButton') or line.startswith('Jrn.RadioButton') or line.startswith('Jrn.RibbonEvent') or line.startswith('Jrn.SliderCtrl') or line.startswith('Jrn.TabCtrl') or line.startswith('Jrn.TreeCtrl'):
		lineObjs.append(JournalUIEvent(i,line,b,'JournalUIEvent'))
	# append linebreaks to previous line
	elif lineObjs[-1].RawText[-1] == "_":
		lineObjs[-1].RawText = lineObjs[-1].RawText[:-1] + line
	# append linebreaks in commands
	elif line[0] == ",":
		lineObjs[-1].RawText = (lineObjs[-1].RawText + line).replace(" _,",",")
	elif line[0] == "'":
		# append linebreaks in API Messages
		if line[1] != " " and lineObjs[-1].Type == 'JournalAPIMessage' and not lineObjs[-1].RawText.endswith("}"):
			lineObjs[-1].RawText += " " + line[1:]
		else:
			lineObjs.append(JournalComment(i,line,b,'JournalComment'))
	else:
		lineObjs.append(JournalMiscCommand(i,line,b,'JournalMiscCommand'))
	i += 1
jBlockCount = b

# Round 2: Process raw multiline text and fill type-specific attributes
machineNameFound = False
OSVersionFound = False
for line in lineObjs:
	if line.Type == 'JournalAPIMessage':
		line.MessageText = line.RawText.split("{ ")[1].split(" }")[0].strip()
	elif line.Type == 'JournalDirective':
		d1 = line.RawText.split('"  , ')
		line.Key = d1[0][15:]
		for d2 in d1[1].split(","):
			line.Values.append(d2.strip().replace('"',''))
		# Add Revit version to journal metadata
		if line.Key == 'Version':
			jVersion = int(line.Values[0][:4])
		# Add username to journal metadata
		elif line.Key == 'Username':
			jUsername = line.Values[0]
	elif line.Type == 'JournalData':
		d1 = line.RawText.split('"  , ')
		line.Key = d1[0][10:]
		for d2 in d1[1].split(","):
			line.Values.append(d2.strip().replace('"',''))
	elif line.Type == 'JournalCommand':
		c1 = line.RawText.split('" , "')
		line.CommandType = c1[0][13:]
		c2 = c1[1].split(" , ")
		line.CommandDescription = c2[0]
		line.CommandID = c2[1][:-1]
	elif line.Type == 'JournalMouseEvent':
		m1 = line.RawText.split(" ",1)
		line.MouseEventType = m1[0][4:].strip()
		for m2 in m1[1].split(","):
			line.Data.append(int(m2.strip()))
	elif line.Type == 'JournalKeyboardEvent':
		line.Key = line.RawText.split('"')[1]
	elif line.Type == 'JournalGUIResourceUsage':
		g2 = []
		for g1 in line.RawText.split(","):
			g2.append(int(g1.strip().split()[-1]))
		line.Available = g2[0]
		line.Used = g2[1]
		line.User = g2[2]
	elif line.Type == 'JournalUIEvent':
		d1 = line.RawText.split(" ",1)
		line.UIEventType = d1[0][4:]
		for d2 in d1[1].split(","):
			d3 = d2.strip().replace('"','').strip()
			if line.UIEventType == "RibbonEvent":
				for d4 in d3.split(":"):
					d4 = d4.strip()
					if d4 != "": line.Data.append(d4)
			elif d3 != "": line.Data.append(d3)
	elif line.Type == 'JournalAddinEvent':
		line.MessageText = line.RawText.split('"')[3]
	elif line.Type == 'JournalTimeStamp':
		line.TimeStampType = line.RawText[1]
		ts1 = line.RawText.split(";")	
		line.DateTime = time.strptime(ts1[0][3:])
		line.Description = ts1[1][7:].strip()
	elif line.Type == 'JournalMemoryMetrics':
		if "Initial VM" in line.RawText:
			m1 = line.RawText.split(":",2)[2].replace(";","").split()
		else:
			m1 = line.RawText.split(":",6)[6].split()
		m3 = []
		m4 = []
		for m2 in m1:
			if m2.isdigit(): 
				m3.append(int(m2))
			elif m2 in ("Avail","Used","Peak"):
				m4.append(m2)
		line.VMAvailable = m3[0]
		line.VMUsed = m3[1]
		if len(m3) == 6:		
			line.VMPeak = m3[2]
			line.RAMAvailable = m3[3]
			line.RAMUsed = m3[4]
			line.RAMPeak = m3[5]
		elif len(m3) == 5:
			if m4[2] == "Avail":
				line.VMPeak = None
				line.RAMAvailable = m3[2]
				line.RAMUsed = m3[3]
				line.RAMPeak = m3[4]
			elif m4[2] == "Peak":
				line.VMPeak = m3[2]
				line.RAMAvailable = m3[3]
				line.RAMUsed = m3[4]
				line.RAMPeak = None
		elif len(m3) == 4:
			line.VMPeak = None
			line.RAMAvailable = m3[2]
			line.RAMUsed = m3[3]
			line.RAMPeak = None
	elif line.Type == 'JournalComment':
		if "this journal =" in line.RawText:
			jPath = line.RawText.split("=")[1].strip()
		elif line.RawText.startswith("' Build:"):
			jBuild = line.RawText.split(":")[1].strip()
		elif line.RawText.startswith("' Branch:"):
			jBranch = line.RawText.split(":")[1].strip()
		elif not OSVersionFound:
			if "Caption :" in line.RawText:
				jOSVersion = line.RawText.split(":")[-1].strip()
				OSVersionFound = True
		elif not machineNameFound:
			if "Additional IP address/name found for host" in line.RawText:
				jMachineName = line.RawText.split(":")[1].split(" ")[-1]
				machineNameFound = True

# Create journal object
journal = Journal(lineObjs, jVersion, jUsername, jBlockCount, jPath, jBuild, jBranch, jMachineName, jOSVersion)
for line in journal.Lines:
	line.Journal = journal

# Compute total session time
ts = journal.GetLinesByType('JournalTimeStamp')
journal.SessionTime = ts[-1].DateTime - ts[0].DateTime
# Find out if the session was terminated properly
if ts[-1].Description == "finished recording journal file":
	journal.SessionTerminatedProperly = True
# Find out if journal is in playback mode
if len([x for x in ts if x.Description.startswith("started journal file playback")]) &gt; 0:
	journal.IsInPlaybackMode = True
	# Find out if journal playback was interrupted
	if len([x for x in ts if x.Description.startswith("stopped at line") and x.Description.endswith("journal file playback")]) &gt; 0:
		journal.PlaybackInterrupted = True
# Find out if journal contains recorded exceptions
if len([x for x in ts if x.Description.startswith("ExceptionCode")]) &gt; 0:
	journal.ContainsExceptions = True
# Find out if any API errors occured
apimsgs = journal.GetLinesByType('JournalAPIMessage')
if len([x for x in apimsgs if x.MessageType == "Error"]) &gt; 0:
	journal.ContainsAPIErrors = True
# Compute Revit startup time
comms = journal.GetLinesByType('JournalCommand')
startup = [x.Block for x in comms if x.CommandID == "ID_STARTUP_PAGE"]
if len(startup) &gt; 0:
	journal.StartupTime = [x.DateTime for x in ts if x.Block == startup[0]][0] - ts[0].DateTime
# Compute max/min memory values of session
mm = journal.GetLinesByType('JournalMemoryMetrics')
journal.MaxRAMPeak = max([x.RAMPeak for x in mm])
journal.MinRAMAvailable = min([x.RAMAvailable for x in mm])
journal.MaxVMPeak = max([x.VMPeak for x in mm])
journal.MinVMAvailable = min([x.VMAvailable for x in mm])
# Compute total processing time of this node
journal.ProcessingTime = time.time() - processing_started

OUT = journal</Script>
    </PythonNodeModels.PythonNode>
    <CoreNodeModels.Input.StringInput guid="95ea66d6-fa72-42ef-a9ba-a34aaaa138d0" type="CoreNodeModels.Input.StringInput" nickname="String" x="-1249.38199614502" y="-2244.40250634433" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <System.String>
</System.String>
      <System.String value="&#xD;&#xA;" />
    </CoreNodeModels.Input.StringInput>
    <CoreNodeModels.Input.StringInput guid="e709fbb6-a18d-4f11-a9bd-41c409518623" type="CoreNodeModels.Input.StringInput" nickname="String" x="-344.065365646762" y="-2410.61597172881" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <System.String>JournalCommand</System.String>
      <System.String value="JournalCommand" />
    </CoreNodeModels.Input.StringInput>
    <PythonNodeModels.PythonNode guid="ff4c4254-aefa-489d-9909-857eb959f541" type="PythonNodeModels.PythonNode" nickname="Python Script" x="-49.6339071325866" y="-2739.60362104982" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="False" IsFrozen="false" isPinned="true" inputcount="4">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <PortInfo index="3" default="False" />
      <Script>import clr

def process_input(func, inputs):
	if isinstance(inputs[1], list) or isinstance(inputs[2], list) or isinstance(inputs[3], list): return None
	elif isinstance(inputs[0], list): return [func(x, inputs[1], inputs[2], inputs[3]) for x in inputs[0]]
	else: return func(inputs[0], inputs[1], inputs[2], inputs[3])
	
def journalLineAllNextOfTypeAndProperty(jline, type, prop, val):
	if hasattr(jline, 'AllNextOfTypeAndProperty'): 
		return jline.AllNextOfTypeAndProperty(type, prop, val)
	else: return None

OUT = process_input(journalLineAllNextOfTypeAndProperty, IN)</Script>
    </PythonNodeModels.PythonNode>
    <CoreNodeModels.Input.StringInput guid="79f9190a-aee8-4e63-bbcc-7dbb40da47d6" type="CoreNodeModels.Input.StringInput" nickname="String" x="-344.769045059528" y="-2576.90970785794" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <System.String>CommandID</System.String>
      <System.String value="CommandID" />
    </CoreNodeModels.Input.StringInput>
    <CoreNodeModels.Input.StringInput guid="9aacb600-0d0f-442d-85cb-4b5f998140bb" type="CoreNodeModels.Input.StringInput" nickname="String" x="-350.360520357214" y="-2497.12533554897" isVisible="true" isUpstreamVisible="true" lacing="Disabled" isSelectedInput="True" IsFrozen="false" isPinned="false">
      <System.String>ID_CANCEL_EDITOR</System.String>
      <System.String value="ID_CANCEL_EDITOR" />
    </CoreNodeModels.Input.StringInput>
    <Dynamo.Graph.Nodes.CustomNodes.Function guid="fe8116ab-bb11-4c70-a9ee-32fb593348b3" type="Dynamo.Graph.Nodes.CustomNodes.Function" nickname="JournalLine.AllNextOfType" x="-16.1986144481773" y="-1908.56149550923" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <ID value="1f7ec4a9-7fe5-4bd9-ae9f-0364fe04cc5d" />
      <Name value="JournalLine.AllNextOfType" />
      <Description value="" />
      <Inputs>
        <Input value="journalLine" />
        <Input value="journalLineType" />
      </Inputs>
      <Outputs>
        <Output value="journalLines" />
      </Outputs>
    </Dynamo.Graph.Nodes.CustomNodes.Function>
    <Dynamo.Graph.Nodes.CustomNodes.Function guid="a18298b3-2502-4d12-9ccd-6be6bbfa852d" type="Dynamo.Graph.Nodes.CustomNodes.Function" nickname="JournalLine.AllPreviousOfType" x="-11.1925408321063" y="-1764.17833772545" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <ID value="7c4fef62-0441-4d5d-a1bf-967b12c4a43b" />
      <Name value="JournalLine.AllPreviousOfType" />
      <Description value="" />
      <Inputs>
        <Input value="journalLine" />
        <Input value="journalLineType" />
      </Inputs>
      <Outputs>
        <Output value="journalLines" />
      </Outputs>
    </Dynamo.Graph.Nodes.CustomNodes.Function>
    <Dynamo.Graph.Nodes.CustomNodes.Function guid="95fe4494-4668-43d4-ae58-1aa7a181ed4a" type="Dynamo.Graph.Nodes.CustomNodes.Function" nickname="JournalLine.NextOfType" x="360.275497548049" y="-1979.49749080083" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <ID value="6fc48c9e-94ed-4611-899e-bd4dafb86411" />
      <Name value="JournalLine.NextOfType" />
      <Description value="" />
      <Inputs>
        <Input value="journalLine" />
        <Input value="journalLineType" />
      </Inputs>
      <Outputs>
        <Output value="journalLine" />
      </Outputs>
    </Dynamo.Graph.Nodes.CustomNodes.Function>
    <Dynamo.Graph.Nodes.CustomNodes.Function guid="f57a6fb6-ef92-4256-89d3-c309655d7eaf" type="Dynamo.Graph.Nodes.CustomNodes.Function" nickname="JournalLIne.PreviousOfType" x="384.046674167016" y="-1829.95970320255" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <ID value="b3150a66-0850-4291-a33c-e80e0f244203" />
      <Name value="JournalLIne.PreviousOfType" />
      <Description value="" />
      <Inputs>
        <Input value="journalLine" />
        <Input value="journalLineType" />
      </Inputs>
      <Outputs>
        <Output value="journalLine" />
      </Outputs>
    </Dynamo.Graph.Nodes.CustomNodes.Function>
    <Dynamo.Graph.Nodes.CustomNodes.Function guid="86cac6ed-fef1-4f25-bc40-c095902a69b4" type="Dynamo.Graph.Nodes.CustomNodes.Function" nickname="Journal.GetLinesByTypeAndProperty" x="-489.397580443428" y="-2866.77611330548" isVisible="true" isUpstreamVisible="true" lacing="Shortest" isSelectedInput="False" IsFrozen="false" isPinned="false">
      <PortInfo index="0" default="False" />
      <PortInfo index="1" default="False" />
      <PortInfo index="2" default="False" />
      <PortInfo index="3" default="False" />
      <ID value="34868ba5-6614-4415-b848-e36578fd5462" />
      <Name value="Journal.GetLinesByTypeAndProperty" />
      <Description value="" />
      <Inputs>
        <Input value="journal" />
        <Input value="journalLineType" />
        <Input value="property" />
        <Input value="value" />
      </Inputs>
      <Outputs>
        <Output value="journalLines" />
      </Outputs>
    </Dynamo.Graph.Nodes.CustomNodes.Function>
  </Elements>
  <Connectors>
    <Dynamo.Graph.Connectors.ConnectorModel start="19fd1f7b-c2dc-4f95-9b5f-26ec82af2d4a" start_index="0" end="fbf3e296-e2e2-4ba0-9585-dfc942d02331" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="fbf3e296-e2e2-4ba0-9585-dfc942d02331" start_index="0" end="7a0b9ac6-ed23-45c0-ac0e-3b6e97941625" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="7a0b9ac6-ed23-45c0-ac0e-3b6e97941625" start_index="0" end="41c6f982-6c1c-4b72-a203-3f4e2d5b2b05" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="7a0b9ac6-ed23-45c0-ac0e-3b6e97941625" start_index="0" end="bbf4c1a2-2f77-44e0-b339-2db1d7e9c6fc" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="26e144d5-ffd0-4165-8dd7-5975975e468c" start_index="0" end="ff4c4254-aefa-489d-9909-857eb959f541" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="26e144d5-ffd0-4165-8dd7-5975975e468c" start_index="0" end="fe8116ab-bb11-4c70-a9ee-32fb593348b3" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="26e144d5-ffd0-4165-8dd7-5975975e468c" start_index="0" end="a18298b3-2502-4d12-9ccd-6be6bbfa852d" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="26e144d5-ffd0-4165-8dd7-5975975e468c" start_index="0" end="95fe4494-4668-43d4-ae58-1aa7a181ed4a" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="26e144d5-ffd0-4165-8dd7-5975975e468c" start_index="0" end="f57a6fb6-ef92-4256-89d3-c309655d7eaf" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="bbf4c1a2-2f77-44e0-b339-2db1d7e9c6fc" start_index="0" end="b6c87b5e-da3f-479c-80e2-27f2bc7e86b7" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="b6c87b5e-da3f-479c-80e2-27f2bc7e86b7" start_index="0" end="305fb3aa-fc30-488f-b2c3-c46792df4577" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="305fb3aa-fc30-488f-b2c3-c46792df4577" start_index="0" end="26e144d5-ffd0-4165-8dd7-5975975e468c" end_index="0" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="95ea66d6-fa72-42ef-a9ba-a34aaaa138d0" start_index="0" end="bbf4c1a2-2f77-44e0-b339-2db1d7e9c6fc" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="e709fbb6-a18d-4f11-a9bd-41c409518623" start_index="0" end="ff4c4254-aefa-489d-9909-857eb959f541" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="e709fbb6-a18d-4f11-a9bd-41c409518623" start_index="0" end="fe8116ab-bb11-4c70-a9ee-32fb593348b3" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="e709fbb6-a18d-4f11-a9bd-41c409518623" start_index="0" end="a18298b3-2502-4d12-9ccd-6be6bbfa852d" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="e709fbb6-a18d-4f11-a9bd-41c409518623" start_index="0" end="95fe4494-4668-43d4-ae58-1aa7a181ed4a" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="e709fbb6-a18d-4f11-a9bd-41c409518623" start_index="0" end="f57a6fb6-ef92-4256-89d3-c309655d7eaf" end_index="1" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="79f9190a-aee8-4e63-bbcc-7dbb40da47d6" start_index="0" end="ff4c4254-aefa-489d-9909-857eb959f541" end_index="2" portType="0" />
    <Dynamo.Graph.Connectors.ConnectorModel start="9aacb600-0d0f-442d-85cb-4b5f998140bb" start_index="0" end="ff4c4254-aefa-489d-9909-857eb959f541" end_index="3" portType="0" />
  </Connectors>
  <Notes>
    <Dynamo.Graph.Notes.NoteModel guid="4466d20a-ca37-4834-9f16-922d103d7523" text="AllNextOfType" x="-72.2045737104943" y="-2486.68628150913" />
    <Dynamo.Graph.Notes.NoteModel guid="8c4677d2-7540-4ac0-a5c7-4cd74afe1208" text="AllPreviousOfType" x="133.973609358139" y="-2486.70587362658" />
    <Dynamo.Graph.Notes.NoteModel guid="23125ae4-7d3f-4248-a1cd-362f5355c77b" text="NextOfType" x="420.499467346709" y="-2485.06124971168" />
    <Dynamo.Graph.Notes.NoteModel guid="c658f67b-da13-4a6b-8e7b-0f8415a647cb" text="PreviousOfType" x="652.692864071421" y="-2487.32476908568" />
    <Dynamo.Graph.Notes.NoteModel guid="e4b966d2-53e9-4e40-a6dd-5466ce27cbf5" text="AllNextOfTypeAndProperty" x="-35.9704588082487" y="-2780.22202161923" />
  </Notes>
  <Annotations>
    <Dynamo.Graph.Annotations.AnnotationModel guid="57f8b93d-0c71-471d-9495-383295a5f9ec" annotationText="Evaluate Journal" left="-1340.88599171625" top="-2125.65167095318" width="660.349628857405" height="139" fontSize="30" InitialTop="-2079.65167095318" InitialHeight="201.530215721562" TextblockHeight="36" backgrouund="#FFC1D676">
      <Models ModelGuid="fbf3e296-e2e2-4ba0-9585-dfc942d02331" />
      <Models ModelGuid="7a0b9ac6-ed23-45c0-ac0e-3b6e97941625" />
      <Models ModelGuid="41c6f982-6c1c-4b72-a203-3f4e2d5b2b05" />
    </Dynamo.Graph.Annotations.AnnotationModel>
    <Dynamo.Graph.Annotations.AnnotationModel guid="7f0af76a-43ec-4354-bbde-87daeb7c6821" annotationText="INPUT" left="-1692.88599171625" top="-2125.65167095318" width="241" height="140" fontSize="30" InitialTop="-2079.65167095318" InitialHeight="126" TextblockHeight="36" backgrouund="#FF848484">
      <Models ModelGuid="19fd1f7b-c2dc-4f95-9b5f-26ec82af2d4a" />
    </Dynamo.Graph.Annotations.AnnotationModel>
  </Annotations>
  <Presets />
  <Cameras>
    <Camera Name="Background Preview" eyeX="-17" eyeY="24" eyeZ="50" lookX="12" lookY="-13" lookZ="-58" upX="0" upY="1" upZ="0" />
  </Cameras>
</Workspace>